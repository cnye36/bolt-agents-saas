generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  agents        Agent[]
  workflows     Workflow[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id           String         @id @default(cuid())
  name         String
  type         String
  description  String?
  model        String
  temperature  Float         @default(0.7)
  maxTokens    Int           @default(1000)
  systemPrompt String?
  apiEndpoint  String?
  status       String        @default("inactive")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflows    WorkflowNode[]
}

model Workflow {
  id          String         @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodes       WorkflowNode[]
  edges       WorkflowEdge[]
}

model WorkflowNode {
  id         String   @id @default(cuid())
  type       String
  position   String
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  agentId    String
  agent      Agent    @relation(fields: [agentId], references: [id])
}

model WorkflowEdge {
  id         String   @id @default(cuid())
  source     String
  target     String
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}